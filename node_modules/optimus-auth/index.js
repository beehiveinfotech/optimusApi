'use strict'

const  _ = require('lodash')
    , jwt = require('jsonwebtoken')
    , secret = "optimus@dev"



module.exports.login = (req, res,next) => {
    let options = req.headers.options
        , db = options.db
   let emailaddress = req.body.emailaddress
        , token = req.body['x-access-token']

        let _selectTokenAndUserName = (emailaddress_val) => {
            
                return new Promise((resolve, reject) => {
                    db.query('select get_user_verify_otp($1,$2,$3,$4)', [emailaddress_val, '', 'GET_TOKEN', ''], (err, result) => {
                        if (err) {
                            console.log('Error', err)
                            reject(null)
                        } else {
                            console.log('The Select Token', result)
                            resolve(result)
                        }
                    })
                })
        
           
        }
        let _updateTokenInDataBase = (emailaddress_val) => {
            return new Promise((resolve, reject) => {
                db.query('select get_user_verify_otp($1,$2,$3,$4)', [emailaddress_val, '', 'VERIFY_TOKEN', ''], (err, result) => {
                    if (err) {
                        console.log('Error', err)
                        reject(null)
                    } else {
                        resolve(result)
                    }
                })
            })
        }

    //Check from DB User Token is exists or NOT
   
    _selectTokenAndUserName(emailaddress).then(result => {
        console.log('Inside Login Auth',result.rows[0].get_user_verify_otp)
        if (!result.rows[0].get_user_verify_otp) {
            return res.status(501).json({ success: false, tokenstatus: false, message: 'Please provide your login credentials First' })
            //console.log('Error in Token Selection')
        } else {
            if (token === result.rows[0].get_user_verify_otp) {

                jwt.verify(token, secret, (error, result) => {
                    if (error) {
                        _updateTokenInDataBase(emailaddress).then(result => {
                            console.log('The Generated Token Is', result)

                        })
                        return res.status(200).json({ success: false, tokenstatus: false, message: 'Token Verification fail' })

                    } else {

                        next()
                    }
                })
            } else {
                return res.status(200).json({ success: false, tokenstatus: false, message: 'Please provide your login credentials' })
            }
        }
    })

}