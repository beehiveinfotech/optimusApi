'use strict'
module.exports.getnetworkdata=(req,res,next)=>{
    let options = req.headers.options
    ,db = options.db
    ,p_emailaddress = req.body.emailaddress
    ,dataVal = []
   ,response = {
    'success':false,
    'message':''     
   
   }
   console.log('The body is',req.body)

   let  _buildTree=(tree, item)=> {
    if (item) { // if item then have parent
        for (var i=0; i<tree.length; i++) { // parses the entire tree in order to find the parent
            if (String(tree[i].usercode) === String(item.parentcode)) { 
                tree[i].children.push(item); // add the child to his parent
                break;
            }
            else _buildTree(tree[i].children, item); // if item doesn't match but tree have childs then parses childs again to find item parent
        }
    }
    else { // if no item then is a root item, multiple root items are supported
        var idx = 0;
        while (idx < tree.length)
            if (tree[idx].parentcode) _buildTree(tree, tree.splice(idx, 1)[0]) // if have parent then remove it from the array to relocate it to the right place
            else idx++; // if doesn't have parent then is root and move it to the next object
    }
}

    return new Promise((resolve,reject)=>{
    db.query('select get_network_Data($1)',[p_emailaddress], (err, result) => {
         if(err){
            console.log('The Error',err)
            response['success']= 'false'
            response['message'] = 'Error in Operation'
            return reject(response)

         }else{
           
            response['success']= true
            response['message'] = 'Data Fetched'

            dataVal = result.rows[0].get_network_data
          
            for (var i=0; i<dataVal.length; i++) { // add childs to every item
                dataVal[i].children = [];
            }
           
            _buildTree(dataVal)
            console.log('the network value',dataVal)
            response['data'] = result.rows[0].get_network_data
            return resolve(response)

         }

    })
   }).then(response=>{
    res.status(200).json(response)
   }).catch(error=>{
    res.status(200).json(response)
   })

}